AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Resources:
      
 GetCaseFunction:
  Type: AWS::Serverless::Function
  Properties:
   CodeUri: target/case-manager-1.0.0.jar
   Handler: com.sreejith824.pwapoc.creditcase.handler.GetCaseFunctionHandler::handleRequest
   Runtime: java8
   MemorySize: 512
   Timeout: 30
   Role: "arn:aws:iam::616030043679:role/pwapoc-case-stackv1-LambdaExecutionRole-1U05UJYGNN2SM"

 CreateCaseFunction:
  Type: AWS::Serverless::Function
  Properties:
   CodeUri: target/case-manager-1.0.0.jar
   Handler: com.sreejith824.pwapoc.creditcase.handler.CreateCaseFunctionHandler::handleRequest
   Runtime: java8
   MemorySize: 512
   Timeout: 30
   Role: "arn:aws:iam::616030043679:role/pwapoc-case-stackv1-LambdaExecutionRole-1U05UJYGNN2SM"   

 CaseRestApi:
  Type: "AWS::ApiGateway::RestApi"
  Properties:
   Name: "CaseRestApi"
   FailOnWarnings: "true"
   
 CaseResource:
  Type: "AWS::ApiGateway::Resource"
  Properties:
   ParentId : !GetAtt CaseRestApi.RootResourceId
   PathPart: "case"
   RestApiId:
    Ref: "CaseRestApi" 

    
 
 GetCaseMethod:
  Type: "AWS::ApiGateway::Method"
  Properties:
   HttpMethod: "GET"
   AuthorizationType: "NONE"
   ResourceId:
    Ref: "CaseResource"
   RestApiId:
    Ref: "CaseRestApi"
   RequestParameters :
    "method.request.querystring.caseId" : "TRUE"  
   MethodResponses:
    -
     StatusCode: 200
     
   Integration:
    Type: "AWS"
    Uri : !Join [
     "", ["arn:aws:apigateway:",
      {"Ref": "AWS::Region"}, ":",
      "lambda:path/",
      "/2015-03-31/functions/",
      !GetAtt GetCaseFunction.Arn,
      "/invocations" 
      ]
     ]

    IntegrationHttpMethod: "POST"
    RequestTemplates :
     "application/json" : "{ #foreach($param in $input.params().querystring.keySet()) \n \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\" \n #if($foreach.hasNext),#end \n #end }"
    
    IntegrationResponses: 
     -
      StatusCode: 200


 GetCaseRestApiGatewayInvoke:
  Type: "AWS::Lambda::Permission"
  Properties: 
   Action: lambda:InvokeFunction
   FunctionName: !GetAtt GetCaseFunction.Arn
   Principal: apigateway.amazonaws.com
   SourceArn: !Join [
    "", [ "arn:aws:execute-api:", 
      {"Ref": "AWS::Region"}, ":", 
      {"Ref": "AWS::AccountId"}, ":", 
      !Ref CaseRestApi, "/*/*/*"
      ]
     ] 

 
 CreateCaseMethod:
  Type: "AWS::ApiGateway::Method"
  Properties:
   HttpMethod: "POST"
   AuthorizationType: "NONE"
   ResourceId:
    Ref: "CaseResource"
   RestApiId:
    Ref: "CaseRestApi"
   MethodResponses:
    -
     StatusCode: 200
     
   Integration:
    Type: "AWS"
    Uri : !Join [
     "", ["arn:aws:apigateway:",
      {"Ref": "AWS::Region"}, ":",
      "lambda:path/",
      "/2015-03-31/functions/",
      !GetAtt CreateCaseFunction.Arn,
      "/invocations" 
      ]
     ]

    IntegrationHttpMethod: "POST"
    IntegrationResponses: 
     -
      StatusCode: 200

 CreateCaseRestApiGatewayInvoke:
  Type: "AWS::Lambda::Permission"
  Properties: 
   Action: lambda:InvokeFunction
   FunctionName: !GetAtt CreateCaseFunction.Arn
   Principal: apigateway.amazonaws.com
   SourceArn: !Join [
    "", [ "arn:aws:execute-api:", 
      {"Ref": "AWS::Region"}, ":", 
      {"Ref": "AWS::AccountId"}, ":", 
      !Ref CaseRestApi, "/*/*/*"
      ]
     ]      
 CaseRestApiDeployment:
  Type: "AWS::ApiGateway::Deployment"
  DependsOn:
   - "GetCaseMethod"
   - "CreateCaseMethod"
  Properties:
   RestApiId:
    Ref: "CaseRestApi" 
   StageName: "stage"      