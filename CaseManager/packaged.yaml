AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  CaseDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: caseData
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
  DynamoDBPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ddbexecution
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: '*'
          Resource:
            Fn::GetAtt:
            - CaseDB
            - Arn
      Roles:
      - Ref: LambdaExecutionRole
  GetCaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://pwapoc-sam/1c09c01288f09cee43101463fcbc0560
      Handler: com.sreejith824.pwapoc.creditcase.handler.GetCaseFunctionHandler::handleRequest
      Runtime: java8
      MemorySize: 512
      Timeout: 30
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  CaseRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: CaseRestApi
      FailOnWarnings: 'true'
  CaseResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - CaseRestApi
        - RootResourceId
      PathPart: case
      RestApiId:
        Ref: CaseRestApi
  GetCaseMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      ResourceId:
        Ref: CaseResource
      RestApiId:
        Ref: CaseRestApi
      RequestParameters:
        method.request.querystring.caseId: 'TRUE'
      MethodResponses:
      - StatusCode: 200
      Integration:
        Type: AWS
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ':'
            - lambda:path/
            - /2015-03-31/functions/
            - Fn::GetAtt:
              - GetCaseFunction
              - Arn
            - /invocations
        IntegrationHttpMethod: POST
        RequestTemplates:
          application/json: "{ #foreach($param in $input.params().querystring.keySet())\
            \ \n \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\"\
            \ \n #if($foreach.hasNext),#end \n #end }"
        IntegrationResponses:
        - StatusCode: 200
  CaseRestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - GetCaseMethod
    Properties:
      RestApiId:
        Ref: CaseRestApi
      StageName: stage
  CaseRestApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - GetCaseFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - ':'
          - Ref: CaseRestApi
          - /*/*/*
