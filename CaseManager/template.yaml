AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

## Resources started

Resources:

##Dynamo DB table creation
 
 CaseDB: 
  Type: AWS::DynamoDB::Table
  Properties: 
   AttributeDefinitions:
    -
     AttributeName: "id"
     AttributeType: "S"
   KeySchema: 
    -
     AttributeName: "id"
     KeyType: "HASH"
   ProvisionedThroughput: 
    ReadCapacityUnits: "5"
    WriteCapacityUnits: "5"
   TableName: "caseData"

## IAM Role to execute Lambda function and 
       
 LambdaExecutionRole:
  Type: AWS::IAM::Role
  Properties:
   AssumeRolePolicyDocument:
    Version: '2012-10-17'
    Statement:
     Effect: Allow
     Principal:
      Service: lambda.amazonaws.com
     Action: sts:AssumeRole
   Path: "/"
   
## policy to act on dynamodb created above    

 DynamoDBPolicies: 
  Type: "AWS::IAM::Policy"
  Properties: 
   PolicyName: "ddbexecution"
   PolicyDocument: 
    Version: "2012-10-17"
    Statement: 
     - 
      Effect: "Allow"
      Action: "*"
      Resource: !GetAtt CaseDB.Arn 
   Roles: 
    - 
     Ref: "LambdaExecutionRole"   

##Lambda function to get case from DynamoDB - Java
      
 GetCaseFunction:
  Type: AWS::Serverless::Function
  Properties:
   CodeUri: target/case-manager-1.0.0.jar
   Handler: com.sreejith824.pwapoc.creditcase.handler.GetCaseFunctionHandler::handleRequest
   Runtime: java8
   MemorySize: 512
   Timeout: 30
   Role: !GetAtt LambdaExecutionRole.Arn
   
##Lambda function to get case from DynamoDB - Java

 CreateCaseFunction:
  Type: AWS::Serverless::Function
  Properties:
   CodeUri: target/case-manager-1.0.0.jar
   Handler: com.sreejith824.pwapoc.creditcase.handler.CreateCaseFunctionHandler::handleRequest
   Runtime: java8
   MemorySize: 512
   Timeout: 30
   Role: !GetAtt LambdaExecutionRole.Arn  

## API GW

 CaseRestApi:
  Type: "AWS::ApiGateway::RestApi"
  Properties:
   Name: "CaseRestApi"
   FailOnWarnings: "true"
   
## Create rest resource "case"
   
 CaseResource:
  Type: "AWS::ApiGateway::Resource"
  Properties:
   ParentId : !GetAtt CaseRestApi.RootResourceId
   PathPart: "case"
   RestApiId:
    Ref: "CaseRestApi" 

## HTTP GET to get case using query string    
 
 GetCaseMethod:
  Type: "AWS::ApiGateway::Method"
  Properties:
   HttpMethod: "GET"
   AuthorizationType: "NONE"
   ResourceId:
    Ref: "CaseResource"
   RestApiId:
    Ref: "CaseRestApi"
   RequestParameters :
    "method.request.querystring.caseId" : "TRUE"  
   MethodResponses:
    -
     StatusCode: 200
     
   Integration:
    Type: "AWS"
    Uri : !Join [
     "", ["arn:aws:apigateway:",
      {"Ref": "AWS::Region"}, ":",
      "lambda:path/",
      "/2015-03-31/functions/",
      !GetAtt GetCaseFunction.Arn,
      "/invocations" 
      ]
     ]

    IntegrationHttpMethod: "POST"
    RequestTemplates :
     "application/json" : "{ #foreach($param in $input.params().querystring.keySet()) \n \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\" \n #if($foreach.hasNext),#end \n #end }"
    
    IntegrationResponses: 
     -
      StatusCode: 200
      
## Lambda permission to API GW to execute GetCaseFunciotn  

 GetCaseRestApiGatewayInvoke:
  Type: "AWS::Lambda::Permission"
  Properties: 
   Action: lambda:InvokeFunction
   FunctionName: !GetAtt GetCaseFunction.Arn
   Principal: apigateway.amazonaws.com
   SourceArn: !Join [
    "", [ "arn:aws:execute-api:", 
      {"Ref": "AWS::Region"}, ":", 
      {"Ref": "AWS::AccountId"}, ":", 
      !Ref CaseRestApi, "/*/*/*"
      ]
     ] 

## HTTP POST to save case details
  
 CreateCaseMethod:
  Type: "AWS::ApiGateway::Method"
  Properties:
   HttpMethod: "POST"
   AuthorizationType: "NONE"
   ResourceId:
    Ref: "CaseResource"
   RestApiId:
    Ref: "CaseRestApi"
   MethodResponses:
    -
     StatusCode: 200
     
   Integration:
    Type: "AWS"
    Uri : !Join [
     "", ["arn:aws:apigateway:",
      {"Ref": "AWS::Region"}, ":",
      "lambda:path/",
      "/2015-03-31/functions/",
      !GetAtt CreateCaseFunction.Arn,
      "/invocations" 
      ]
     ]

    IntegrationHttpMethod: "POST"
    IntegrationResponses: 
     -
      StatusCode: 200

## Lambda permission to API GW to execute CreateCaseFunction  

 CreateCaseRestApiGatewayInvoke:
  Type: "AWS::Lambda::Permission"
  Properties: 
   Action: lambda:InvokeFunction
   FunctionName: !GetAtt CreateCaseFunction.Arn
   Principal: apigateway.amazonaws.com
   SourceArn: !Join [
    "", [ "arn:aws:execute-api:", 
      {"Ref": "AWS::Region"}, ":", 
      {"Ref": "AWS::AccountId"}, ":", 
      !Ref CaseRestApi, "/*/*/*"
      ]
     ]      

## Deploy APIs to Get case and create case APIs into stage
     
 CaseRestApiDeployment:
  Type: "AWS::ApiGateway::Deployment"
  DependsOn:
   - "GetCaseMethod"
   - "CreateCaseMethod"
  Properties:
   RestApiId:
    Ref: "CaseRestApi" 
   StageName: "stage"      